
// 2018/05/04
// full text search

B-tree index (일반적인 index)

Full-text Index
 - 한 컬럼 안에서 많은 형태의 데이터가 담겨있어서, 효율적으로 데이터를 찾는 경우 사용함.
 - 사용자가 쓰기 나름인 데이터를 토큰 단위로 쪼개서 검색에 용이하게함.
 - 한글, 영어, 숙자가 섞여있거나 긴 내용 검색 시 사용.

 1. built-in parser OR stop-word parser
  - stop-word 기법을 사용하는 기본 내장 파서(built-in parser)이용.
  - stop-word는 토큰을 나눌 때 해당하는 stop-word가 나타났을 때 기준으로 토큰을 나눈다.

  * input text : "나는 훠궈를 좋아한다"
  * stop-word : "" (공백. 공백은 디폴트 값) 일반적으로 쉼표 또는 한국어의 조사를 사용함.
  * Token : 나는 | 훠궈를 | 좋아한다
  * 공백을 기준으로 3개 토큰이 인덱싱 되었음.

stop-word 는 문서의 본문으로 부터 키워드를 추출해 내는 작업이 추가로 필요 할 뿐, 내부적으로는 B-tree 인덱스를 그대로 사용함.
stop-word 인덱스의 많은 부분은 B-tree 특성을 따르지만, 전문 검색 엔진을 통해 조회되는 레코드는 검색어나 본문 내용으로 정렬되어 조회 되지 않는다.
전문 검색에서 결과의 정렬을 Match percent(일치율) 높은 순으로 출력.
stop-word는 문장 기호 뿐 아니라 특정 단어를 지정 할 수도 있음.

지정된 규칙이 없는 전문도 분석/검색이 가능하게 하는 방법이 N-gram 방식
stop-word 방식에 비해 인덱싱 알골이 복잡하고, 인덱스의 크기도 크다.
일반적으로는 2글자 단위로 키워드를 쪼개서, 2-Gram 방식 많이 사용

stop-word 방식의 경우엔,  구분자 기준으로 왼쪽 일치 기준으로 검색을 실행하기 때문에 "아이폰" 검색 시 "애플아이폰" 을 검색하면 안됨..
이런 제약은 이커머스와 같은 웹서비스에는 좋지 않다...

N-gram 방식의 인덱스는 인덱스 생성 과정이 복잡하므로, 전문 인덱스에 키워드를 추가하거나, 삭제하는 시간도 많이 걸린다.
하지만 전문 검색을 수행하는데 걸리는 시간은 2-Gram 알고리즘의 트리톤이 2~3배 이상 빠르며,
클라이언트 동시 실행 쿼리가 많아질 수록 차이는 더 벌어짐.

// 출처 : http://interconnection.tistory.com/95
// 아직 다 이해 못 함. 다시 정리 필요!!!!